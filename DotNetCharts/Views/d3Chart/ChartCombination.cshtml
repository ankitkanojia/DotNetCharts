@{
    ViewBag.Title = "d3.js Charts";
    Layout = "~/Views/Shared/_d3ChartLayout.cshtml";
}

<div class="row pt-3 px-4">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                Bar Chart
            </div>
            <div class="card-body">
                <div id="chartBar" class="text-center"></div>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                Area Chart
            </div>
            <div class="card-body">
                <div id="chartArea" class="text-center"></div>
            </div>
        </div>
    </div>
</div>

<div class="row pt-3 px-4 mb-5">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                Pie Chart
            </div>
            <div class="card-body">
                <div id="chartPie" class="text-center"></div>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                Line Chart
            </div>
            <div class="card-body">
                <div id="chartLine" class="text-center"></div>
            </div>
        </div>
    </div>
</div>

<script>
    // set the dimensions and margins of the graph
    var marginBar = { top: 30, right: 30, bottom: 70, left: 60 },
        width = 460 - marginBar.left - marginBar.right,
        height = 400 - marginBar.top - marginBar.bottom;

    // append the svg object to the body of the page
    var svgBar = d3.select("#chartBar")
        .append("svg")
        .attr("width", width + marginBar.left + marginBar.right)
        .attr("height", height + marginBar.top + marginBar.bottom)
        .append("g")
        .attr("transform",
        "translate(" + marginBar.left + "," + marginBar.top + ")");

    // Parse the Data
    d3.csv("https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/7_OneCatOneNum_header.csv", function (data) {

        // X axis
        var x = d3.scaleBand()
            .range([0, width])
            .domain(data.map(function (d) { return d.Country; }))
            .padding(0.2);
        svgBar.append("g")
            .attr("transform", "translate(0," + height + ")")
            .call(d3.axisBottom(x))
            .selectAll("text")
            .attr("transform", "translate(-10,0)rotate(-45)")
            .style("text-anchor", "end");

        // Add Y axis
        var y = d3.scaleLinear()
            .domain([0, 13000])
            .range([height, 0]);
        svgBar.append("g")
            .call(d3.axisLeft(y));

        // Bars
        svgBar.selectAll("mybar")
            .data(data)
            .enter()
            .append("rect")
            .attr("x", function (d) { return x(d.Country); })
            .attr("y", function (d) { return y(d.Value); })
            .attr("width", x.bandwidth())
            .attr("height", function (d) { return height - y(d.Value); })
            .attr("fill", "#69b3a2")
    })
</script>

<script>
    // set the dimensions and margins of the graph
    var marginArea = { top: 10, right: 30, bottom: 30, left: 50 },
        width = 460 - marginArea.left - marginArea.right,
        height = 400 - marginArea.top - marginArea.bottom;

    // append the svg object to the body of the page
    var svgArea = d3.select("#chartArea")
        .append("svg")
        .attr("width", width + marginArea.left + marginArea.right)
        .attr("height", height + marginArea.top + marginArea.bottom)
        .append("g")
        .attr("transform",
        "translate(" + marginArea.left + "," + marginArea.top + ")");

    //Read the data
    d3.csv("https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/3_TwoNumOrdered_comma.csv",

        // When reading the csv, I must format variables:
        function (d) {
            return { date: d3.timeParse("%Y-%m-%d")(d.date), value: d.value }
        },

        // Now I can use this dataset:
        function (data) {

            // Add X axis --> it is a date format
            var x = d3.scaleTime()
                .domain(d3.extent(data, function (d) { return d.date; }))
                .range([0, width]);
            svgArea.append("g")
                .attr("transform", "translate(0," + height + ")")
                .call(d3.axisBottom(x));

            // Add Y axis
            var y = d3.scaleLinear()
                .domain([0, d3.max(data, function (d) { return +d.value; })])
                .range([height, 0]);
            svgArea.append("g")
                .call(d3.axisLeft(y));

            // Add the area
            svgArea.append("path")
                .datum(data)
                .attr("fill", "#cce5df")
                .attr("stroke", "#69b3a2")
                .attr("stroke-width", 1.5)
                .attr("d", d3.area()
                    .x(function (d) { return x(d.date) })
                    .y0(y(0))
                    .y1(function (d) { return y(d.value) })
                )

        })
</script>


<script>
    // set the dimensions and margins of the graph
    var width = 450
    height = 450
    marginPie = 40

    // The radius of the pieplot is half the width or half the height (smallest one). I subtract a bit of margin.
    var radius = Math.min(width, height) / 2 - marginPie

    // append the svg object to the div called 'my_dataviz'
    var svgPie = d3.select("#chartPie")
        .append("svg")
        .attr("width", width)
        .attr("height", height)
        .append("g")
        .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

    // Create dummy data
    var data = { a: 9, b: 20, c: 30, d: 8, e: 12 }

    // set the color scale
    var color = d3.scaleOrdinal()
        .domain(data)
        .range(["#98abc5", "#8a89a6", "#7b6888", "#6b486b", "#a05d56"])

    // Compute the position of each group on the pie:
    var pie = d3.pie()
        .value(function (d) { return d.value; })
    var data_ready = pie(d3.entries(data))

    // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.
    svgPie
        .selectAll('whatever')
        .data(data_ready)
        .enter()
        .append('path')
        .attr('d', d3.arc()
            .innerRadius(0)
            .outerRadius(radius)
        )
        .attr('fill', function (d) { return (color(d.data.key)) })
        .attr("stroke", "black")
        .style("stroke-width", "2px")
        .style("opacity", 0.7)
</script>

<script>

    var marginLine = { top: 10, right: 30, bottom: 30, left: 60 },
        width = 460 - marginLine.left - marginLine.right,
        height = 400 - marginLine.top - marginLine.bottom;

    // append the svg object to the body of the page
    var svgLine = d3.select("#chartLine")
        .append("svg")
        .attr("width", width + marginLine.left + marginLine.right)
        .attr("height", height + marginLine.top + marginLine.bottom)
        .append("g")
        .attr("transform",
        "translate(" + marginLine.left + "," + marginLine.top + ")");

    //Read the data
    d3.csv("https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/3_TwoNumOrdered_comma.csv",

        // When reading the csv, I must format variables:
        function (d) {
            return { date: d3.timeParse("%Y-%m-%d")(d.date), value: d.value }
        },

        // Now I can use this dataset:
        function (data) {

            // Add X axis --> it is a date format
            var x = d3.scaleTime()
                .domain(d3.extent(data, function (d) { return d.date; }))
                .range([0, width]);
            svgLine.append("g")
                .attr("transform", "translate(0," + height + ")")
                .call(d3.axisBottom(x));

            // Add Y axis
            var y = d3.scaleLinear()
                .domain([0, d3.max(data, function (d) { return +d.value; })])
                .range([height, 0]);
            svgLine.append("g")
                .call(d3.axisLeft(y));

            // Add the line
            svgLine.append("path")
                .datum(data)
                .attr("fill", "none")
                .attr("stroke", "steelblue")
                .attr("stroke-width", 1.5)
                .attr("d", d3.line()
                    .x(function (d) { return x(d.date) })
                    .y(function (d) { return y(d.value) })
                )

        })
</script>